<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mapper对应接口的全限定符 -->
<mapper namespace="com.haoran.mapper.EmployeeMapper">
    <!-- mapper接口不能重载，因为根据方法名识别  -->
    <select id="queryById" resultType="com.haoran.pojo.Employee">
        <!-- #{id}代表动态传入的参数，并且进行赋值，名称要一致 -->
        select emp_id empId, emp_name empName, emp_salary empSalary
          from t_emp where emp_id = #{id}
        <!-- #{key}:占位符+赋值 emp_id=?  ?=赋值 可以防止注入攻击，但不能替代容器名(标签 列名 sql关键字) -->
        <!-- ${key}:字符串拼接 "emp_id="+id，如${columnName}=#{columnValue} -->
    </select>

    <!-- 传入多个简单类型，只有两种方式
    方式1：@Param注解指定，如queryByNameAndSalary(@Param("a") String name, @Param("b") Double salary);
    方式2：mybatis默认机制，arg0 arg1... 或 param1 param2... -->
    <select id="queryByNameAndSalary" resultType="employee">
        select emp_id empId, emp_name empName, emp_salary empSalary
        from t_emp where emp_name = #{param1} and emp_salary = #{param2}
    </select>

    <!-- resultMap 可以映射多层结构-->
    <resultMap id="eMap" type="employee">
        <id column="emp_id" property="empId" /> <!--主键映射关系-->
        <result column="emp_name" property="empName"/> <!--普通列的映射关系-->
    </resultMap>
    <select id="queryBySalary" resultMap="eMap">
        <!-- 在setting开启驼峰式自动映射，不用起别名了，但只能映射一层机构-->
        select * from t_emp where emp_salary = #{salary}
    </select>

    <select id="queryEmpNameAndMaxSalary" resultType="map">
        <!-- 返回多条记录需要用List<employee>，类型写employee-->
        <!-- 返回一条记录用Map存储，返回多条用List<Map<,>>存储，返回类型都写map -->
        SELECT emp_name 员工姓名, emp_salary 员工工资, (SELECT AVG(emp_salary) FROM t_emp) 部门平均工资
        FROM t_emp WHERE emp_salary=(SELECT MAX(emp_salary) FROM t_emp)
    </select>

    <!-- 主键回显，获取自增长的主键值 -->
    <!--                   数据库自动增强的主键值      主键列的值         接收主键列值的属性  -->
    <insert id="insertEmp" useGeneratedKeys="true" keyColumn="emp_id" keyProperty="empId">
        <!-- 传入实体对象，直接写对应属性名即可 -->
        insert into t_emp (emp_name,emp_salary) value(#{empName},#{empSalary});
    </insert>

    <!-- 非自增长的主键，交给mybatis维护!-->
    <insert id="insertEmp2">
        <!--       在插入前执行           返回值类型      结果给哪个属性赋值-->
        <selectKey order="BEFORE" resultType="string" keyProperty="empId">
            SELECT REPLACE(UUID(),'-','');
        </selectKey>
        insert into t_emp (emp_id, emp_name,emp_salary) value(#{empId},#{empName},#{empSalary});
    </insert>

    <!-- 传入map：key = map的key即可！-->
    <insert id="insertEmpMap">
        insert into t_emp (emp_name, emp_salary)  values (#{name},#{salary});
    </insert>

    <delete id="deleteById">
        delete from t_emp where emp_id = #{id}
    </delete>


    <!--提取相同SQL片段-->
    <sql id="selectEmp">
        select * from t_emp
    </sql>

    <!--如果传入属性,就判断相等,如果不传入,不加对应的条件-->
    <select id="queryByDynamicSql" resultType="employee">
        <include refid="selectEmp" />
        <!--等价 <trim prefix="where" suffixOverrides="and|or">-->
        <where>  <!--自动添加where关键字，自动去掉多余的and和or-->
            <if test="name != null">
                emp_name = #{name}
            </if> <!--大于可写为 &gt;-->
            <if test="salary != null and salary > 100">
                and emp_salary = #{salary}
            </if>
        </where>
    </select>

    <update id="updateEmp">
        update t_emp
        <set> <!--自动去掉多余逗号，自动添加set关键字-->
            <if test="empName != null">
                emp_name = #{empName} ,
            </if>
            <if test="empSalary">
                emp_salary = #{empSalary}
            </if>
        </set>
        where emp_id = #{empId}
    </update>

    <select id="queryChoose" resultType="employee">
        <include refid="selectEmp" />
        where
        <choose>
            <when test="name != null">
                emp_name = #{name}
            </when>
            <when test="salary != null">
                emp_salary = #{salary}
            </when>
            <otherwise>1=1</otherwise>
        </choose>
    </select>

    <select id="queryBatch" resultType="employee">
        <include refid="selectEmp"/>
        where emp_id in
        <!--     遍历ids(1,2,3)     添加的前缀    分隔符       后缀-->
        <foreach collection="ids" open="(" separator="," close=")" item="id">
            #{id}
        </foreach>
    </select>

    <insert id="insertBatch">
        insert into t_emp (emp_name,emp_salary) values
        <foreach collection="list" separator="," item="emp">
            (#{emp.empName}, #{emp.empSalary})
        </foreach>
    </insert>

</mapper>